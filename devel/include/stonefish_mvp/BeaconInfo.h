// Generated by gencpp from file stonefish_mvp/BeaconInfo.msg
// DO NOT EDIT!


#ifndef STONEFISH_MVP_MESSAGE_BEACONINFO_H
#define STONEFISH_MVP_MESSAGE_BEACONINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Quaternion.h>

namespace stonefish_mvp
{
template <class ContainerAllocator>
struct BeaconInfo_
{
  typedef BeaconInfo_<ContainerAllocator> Type;

  BeaconInfo_()
    : header()
    , beacon_id(0)
    , range(0.0)
    , azimuth(0.0)
    , elevation(0.0)
    , relative_position()
    , local_orientation()
    , local_depth(0.0)  {
    }
  BeaconInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , beacon_id(0)
    , range(0.0)
    , azimuth(0.0)
    , elevation(0.0)
    , relative_position(_alloc)
    , local_orientation(_alloc)
    , local_depth(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _beacon_id_type;
  _beacon_id_type beacon_id;

   typedef float _range_type;
  _range_type range;

   typedef float _azimuth_type;
  _azimuth_type azimuth;

   typedef float _elevation_type;
  _elevation_type elevation;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _relative_position_type;
  _relative_position_type relative_position;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _local_orientation_type;
  _local_orientation_type local_orientation;

   typedef float _local_depth_type;
  _local_depth_type local_depth;





  typedef boost::shared_ptr< ::stonefish_mvp::BeaconInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::stonefish_mvp::BeaconInfo_<ContainerAllocator> const> ConstPtr;

}; // struct BeaconInfo_

typedef ::stonefish_mvp::BeaconInfo_<std::allocator<void> > BeaconInfo;

typedef boost::shared_ptr< ::stonefish_mvp::BeaconInfo > BeaconInfoPtr;
typedef boost::shared_ptr< ::stonefish_mvp::BeaconInfo const> BeaconInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::stonefish_mvp::BeaconInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::stonefish_mvp::BeaconInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::stonefish_mvp::BeaconInfo_<ContainerAllocator1> & lhs, const ::stonefish_mvp::BeaconInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.beacon_id == rhs.beacon_id &&
    lhs.range == rhs.range &&
    lhs.azimuth == rhs.azimuth &&
    lhs.elevation == rhs.elevation &&
    lhs.relative_position == rhs.relative_position &&
    lhs.local_orientation == rhs.local_orientation &&
    lhs.local_depth == rhs.local_depth;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::stonefish_mvp::BeaconInfo_<ContainerAllocator1> & lhs, const ::stonefish_mvp::BeaconInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace stonefish_mvp

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::stonefish_mvp::BeaconInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stonefish_mvp::BeaconInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stonefish_mvp::BeaconInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stonefish_mvp::BeaconInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stonefish_mvp::BeaconInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stonefish_mvp::BeaconInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::stonefish_mvp::BeaconInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f1127716b80995f5b12a8c1f5f98b902";
  }

  static const char* value(const ::stonefish_mvp::BeaconInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf1127716b80995f5ULL;
  static const uint64_t static_value2 = 0xb12a8c1f5f98b902ULL;
};

template<class ContainerAllocator>
struct DataType< ::stonefish_mvp::BeaconInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "stonefish_mvp/BeaconInfo";
  }

  static const char* value(const ::stonefish_mvp::BeaconInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::stonefish_mvp::BeaconInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"uint8 beacon_id\n"
"float32 range\n"
"float32 azimuth\n"
"float32 elevation\n"
"geometry_msgs/Point relative_position\n"
"geometry_msgs/Quaternion local_orientation\n"
"float32 local_depth\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::stonefish_mvp::BeaconInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::stonefish_mvp::BeaconInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.beacon_id);
      stream.next(m.range);
      stream.next(m.azimuth);
      stream.next(m.elevation);
      stream.next(m.relative_position);
      stream.next(m.local_orientation);
      stream.next(m.local_depth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BeaconInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::stonefish_mvp::BeaconInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::stonefish_mvp::BeaconInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "beacon_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.beacon_id);
    s << indent << "range: ";
    Printer<float>::stream(s, indent + "  ", v.range);
    s << indent << "azimuth: ";
    Printer<float>::stream(s, indent + "  ", v.azimuth);
    s << indent << "elevation: ";
    Printer<float>::stream(s, indent + "  ", v.elevation);
    s << indent << "relative_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.relative_position);
    s << indent << "local_orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.local_orientation);
    s << indent << "local_depth: ";
    Printer<float>::stream(s, indent + "  ", v.local_depth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STONEFISH_MVP_MESSAGE_BEACONINFO_H
