// Generated by gencpp from file mvp_msgs/ControlMode.msg
// DO NOT EDIT!


#ifndef MVP_MSGS_MESSAGE_CONTROLMODE_H
#define MVP_MSGS_MESSAGE_CONTROLMODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mvp_msgs/PIDgains.h>
#include <mvp_msgs/PIDgains.h>
#include <mvp_msgs/PIDgains.h>
#include <mvp_msgs/PIDgains.h>
#include <mvp_msgs/PIDgains.h>
#include <mvp_msgs/PIDgains.h>
#include <mvp_msgs/PIDgains.h>
#include <mvp_msgs/PIDgains.h>
#include <mvp_msgs/PIDgains.h>
#include <mvp_msgs/PIDgains.h>
#include <mvp_msgs/PIDgains.h>
#include <mvp_msgs/PIDgains.h>

namespace mvp_msgs
{
template <class ContainerAllocator>
struct ControlMode_
{
  typedef ControlMode_<ContainerAllocator> Type;

  ControlMode_()
    : name()
    , dofs()
    , pid_x()
    , pid_y()
    , pid_z()
    , pid_roll()
    , pid_pitch()
    , pid_yaw()
    , pid_surge()
    , pid_sway()
    , pid_heave()
    , pid_roll_rate()
    , pid_pitch_rate()
    , pid_yaw_rate()  {
    }
  ControlMode_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , dofs(_alloc)
    , pid_x(_alloc)
    , pid_y(_alloc)
    , pid_z(_alloc)
    , pid_roll(_alloc)
    , pid_pitch(_alloc)
    , pid_yaw(_alloc)
    , pid_surge(_alloc)
    , pid_sway(_alloc)
    , pid_heave(_alloc)
    , pid_roll_rate(_alloc)
    , pid_pitch_rate(_alloc)
    , pid_yaw_rate(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _dofs_type;
  _dofs_type dofs;

   typedef  ::mvp_msgs::PIDgains_<ContainerAllocator>  _pid_x_type;
  _pid_x_type pid_x;

   typedef  ::mvp_msgs::PIDgains_<ContainerAllocator>  _pid_y_type;
  _pid_y_type pid_y;

   typedef  ::mvp_msgs::PIDgains_<ContainerAllocator>  _pid_z_type;
  _pid_z_type pid_z;

   typedef  ::mvp_msgs::PIDgains_<ContainerAllocator>  _pid_roll_type;
  _pid_roll_type pid_roll;

   typedef  ::mvp_msgs::PIDgains_<ContainerAllocator>  _pid_pitch_type;
  _pid_pitch_type pid_pitch;

   typedef  ::mvp_msgs::PIDgains_<ContainerAllocator>  _pid_yaw_type;
  _pid_yaw_type pid_yaw;

   typedef  ::mvp_msgs::PIDgains_<ContainerAllocator>  _pid_surge_type;
  _pid_surge_type pid_surge;

   typedef  ::mvp_msgs::PIDgains_<ContainerAllocator>  _pid_sway_type;
  _pid_sway_type pid_sway;

   typedef  ::mvp_msgs::PIDgains_<ContainerAllocator>  _pid_heave_type;
  _pid_heave_type pid_heave;

   typedef  ::mvp_msgs::PIDgains_<ContainerAllocator>  _pid_roll_rate_type;
  _pid_roll_rate_type pid_roll_rate;

   typedef  ::mvp_msgs::PIDgains_<ContainerAllocator>  _pid_pitch_rate_type;
  _pid_pitch_rate_type pid_pitch_rate;

   typedef  ::mvp_msgs::PIDgains_<ContainerAllocator>  _pid_yaw_rate_type;
  _pid_yaw_rate_type pid_yaw_rate;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(DOF_X)
  #undef DOF_X
#endif
#if defined(_WIN32) && defined(DOF_Y)
  #undef DOF_Y
#endif
#if defined(_WIN32) && defined(DOF_Z)
  #undef DOF_Z
#endif
#if defined(_WIN32) && defined(DOF_ROLL)
  #undef DOF_ROLL
#endif
#if defined(_WIN32) && defined(DOF_PITCH)
  #undef DOF_PITCH
#endif
#if defined(_WIN32) && defined(DOF_YAW)
  #undef DOF_YAW
#endif
#if defined(_WIN32) && defined(DOF_SURGE)
  #undef DOF_SURGE
#endif
#if defined(_WIN32) && defined(DOF_SWAY)
  #undef DOF_SWAY
#endif
#if defined(_WIN32) && defined(DOF_HEAVE)
  #undef DOF_HEAVE
#endif
#if defined(_WIN32) && defined(DOF_ROLL_RATE)
  #undef DOF_ROLL_RATE
#endif
#if defined(_WIN32) && defined(DOF_PITCH_RATE)
  #undef DOF_PITCH_RATE
#endif
#if defined(_WIN32) && defined(DOF_YAW_RATE)
  #undef DOF_YAW_RATE
#endif

  enum {
    DOF_X = 0,
    DOF_Y = 1,
    DOF_Z = 2,
    DOF_ROLL = 3,
    DOF_PITCH = 4,
    DOF_YAW = 5,
    DOF_SURGE = 6,
    DOF_SWAY = 7,
    DOF_HEAVE = 8,
    DOF_ROLL_RATE = 9,
    DOF_PITCH_RATE = 10,
    DOF_YAW_RATE = 11,
  };


  typedef boost::shared_ptr< ::mvp_msgs::ControlMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mvp_msgs::ControlMode_<ContainerAllocator> const> ConstPtr;

}; // struct ControlMode_

typedef ::mvp_msgs::ControlMode_<std::allocator<void> > ControlMode;

typedef boost::shared_ptr< ::mvp_msgs::ControlMode > ControlModePtr;
typedef boost::shared_ptr< ::mvp_msgs::ControlMode const> ControlModeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mvp_msgs::ControlMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mvp_msgs::ControlMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mvp_msgs::ControlMode_<ContainerAllocator1> & lhs, const ::mvp_msgs::ControlMode_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.dofs == rhs.dofs &&
    lhs.pid_x == rhs.pid_x &&
    lhs.pid_y == rhs.pid_y &&
    lhs.pid_z == rhs.pid_z &&
    lhs.pid_roll == rhs.pid_roll &&
    lhs.pid_pitch == rhs.pid_pitch &&
    lhs.pid_yaw == rhs.pid_yaw &&
    lhs.pid_surge == rhs.pid_surge &&
    lhs.pid_sway == rhs.pid_sway &&
    lhs.pid_heave == rhs.pid_heave &&
    lhs.pid_roll_rate == rhs.pid_roll_rate &&
    lhs.pid_pitch_rate == rhs.pid_pitch_rate &&
    lhs.pid_yaw_rate == rhs.pid_yaw_rate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mvp_msgs::ControlMode_<ContainerAllocator1> & lhs, const ::mvp_msgs::ControlMode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mvp_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mvp_msgs::ControlMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mvp_msgs::ControlMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mvp_msgs::ControlMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mvp_msgs::ControlMode_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mvp_msgs::ControlMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mvp_msgs::ControlMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mvp_msgs::ControlMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d6ffb9dbcb11283ec4e54683a5c1e8d";
  }

  static const char* value(const ::mvp_msgs::ControlMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5d6ffb9dbcb11283ULL;
  static const uint64_t static_value2 = 0xec4e54683a5c1e8dULL;
};

template<class ContainerAllocator>
struct DataType< ::mvp_msgs::ControlMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mvp_msgs/ControlMode";
  }

  static const char* value(const ::mvp_msgs::ControlMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mvp_msgs::ControlMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"#   This file is part of MVP-Mission program.\n"
"#\n"
"#   MVP-Mission is free software: you can redistribute it and/or modify\n"
"#   it under the terms of the GNU General Public License as published by\n"
"#   the Free Software Foundation, either version 3 of the License, or\n"
"#   (at your option) any later version.\n"
"#\n"
"#   MVP-Mission is distributed in the hope that it will be useful,\n"
"#   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"#   GNU General Public License for more details.\n"
"#\n"
"#   You should have received a copy of the GNU General Public License\n"
"#   along with MVP-Mission.  If not, see <https://www.gnu.org/licenses/>.\n"
"#\n"
"#   Author: Emir Cem Gezer\n"
"#   Email: emircem@uri.edu;emircem.gezer@gmail.com\n"
"#   Year: 2022\n"
"#\n"
"#   Copyright (C) 2022 Smart Ocean Systems Laboratory\n"
"#\n"
"\n"
"int32 DOF_X          = 0\n"
"int32 DOF_Y          = 1\n"
"int32 DOF_Z          = 2\n"
"int32 DOF_ROLL       = 3\n"
"int32 DOF_PITCH      = 4\n"
"int32 DOF_YAW        = 5\n"
"int32 DOF_SURGE      = 6\n"
"int32 DOF_SWAY       = 7\n"
"int32 DOF_HEAVE      = 8\n"
"int32 DOF_ROLL_RATE  = 9\n"
"int32 DOF_PITCH_RATE = 10\n"
"int32 DOF_YAW_RATE   = 11\n"
"\n"
"string name\n"
"int32[] dofs\n"
"\n"
"mvp_msgs/PIDgains pid_x\n"
"mvp_msgs/PIDgains pid_y\n"
"mvp_msgs/PIDgains pid_z\n"
"\n"
"mvp_msgs/PIDgains pid_roll\n"
"mvp_msgs/PIDgains pid_pitch\n"
"mvp_msgs/PIDgains pid_yaw\n"
"\n"
"mvp_msgs/PIDgains pid_surge\n"
"mvp_msgs/PIDgains pid_sway\n"
"mvp_msgs/PIDgains pid_heave\n"
"\n"
"mvp_msgs/PIDgains pid_roll_rate\n"
"mvp_msgs/PIDgains pid_pitch_rate\n"
"mvp_msgs/PIDgains pid_yaw_rate\n"
"================================================================================\n"
"MSG: mvp_msgs/PIDgains\n"
"#\n"
"#   This file is part of MVP-Mission program.\n"
"#\n"
"#   MVP-Mission is free software: you can redistribute it and/or modify\n"
"#   it under the terms of the GNU General Public License as published by\n"
"#   the Free Software Foundation, either version 3 of the License, or\n"
"#   (at your option) any later version.\n"
"#\n"
"#   MVP-Mission is distributed in the hope that it will be useful,\n"
"#   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
"#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
"#   GNU General Public License for more details.\n"
"#\n"
"#   You should have received a copy of the GNU General Public License\n"
"#   along with MVP-Mission.  If not, see <https://www.gnu.org/licenses/>.\n"
"#\n"
"#   Author: Emir Cem Gezer\n"
"#   Email: emircem@uri.edu;emircem.gezer@gmail.com\n"
"#   Year: 2022\n"
"#\n"
"#   Copyright (C) 2022 Smart Ocean Systems Laboratory\n"
"#\n"
"\n"
"float64 kp\n"
"float64 ki\n"
"float64 kd\n"
"float64 k_i_max\n"
"float64 k_i_min\n"
;
  }

  static const char* value(const ::mvp_msgs::ControlMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mvp_msgs::ControlMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.dofs);
      stream.next(m.pid_x);
      stream.next(m.pid_y);
      stream.next(m.pid_z);
      stream.next(m.pid_roll);
      stream.next(m.pid_pitch);
      stream.next(m.pid_yaw);
      stream.next(m.pid_surge);
      stream.next(m.pid_sway);
      stream.next(m.pid_heave);
      stream.next(m.pid_roll_rate);
      stream.next(m.pid_pitch_rate);
      stream.next(m.pid_yaw_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mvp_msgs::ControlMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mvp_msgs::ControlMode_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "dofs[]" << std::endl;
    for (size_t i = 0; i < v.dofs.size(); ++i)
    {
      s << indent << "  dofs[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.dofs[i]);
    }
    s << indent << "pid_x: ";
    s << std::endl;
    Printer< ::mvp_msgs::PIDgains_<ContainerAllocator> >::stream(s, indent + "  ", v.pid_x);
    s << indent << "pid_y: ";
    s << std::endl;
    Printer< ::mvp_msgs::PIDgains_<ContainerAllocator> >::stream(s, indent + "  ", v.pid_y);
    s << indent << "pid_z: ";
    s << std::endl;
    Printer< ::mvp_msgs::PIDgains_<ContainerAllocator> >::stream(s, indent + "  ", v.pid_z);
    s << indent << "pid_roll: ";
    s << std::endl;
    Printer< ::mvp_msgs::PIDgains_<ContainerAllocator> >::stream(s, indent + "  ", v.pid_roll);
    s << indent << "pid_pitch: ";
    s << std::endl;
    Printer< ::mvp_msgs::PIDgains_<ContainerAllocator> >::stream(s, indent + "  ", v.pid_pitch);
    s << indent << "pid_yaw: ";
    s << std::endl;
    Printer< ::mvp_msgs::PIDgains_<ContainerAllocator> >::stream(s, indent + "  ", v.pid_yaw);
    s << indent << "pid_surge: ";
    s << std::endl;
    Printer< ::mvp_msgs::PIDgains_<ContainerAllocator> >::stream(s, indent + "  ", v.pid_surge);
    s << indent << "pid_sway: ";
    s << std::endl;
    Printer< ::mvp_msgs::PIDgains_<ContainerAllocator> >::stream(s, indent + "  ", v.pid_sway);
    s << indent << "pid_heave: ";
    s << std::endl;
    Printer< ::mvp_msgs::PIDgains_<ContainerAllocator> >::stream(s, indent + "  ", v.pid_heave);
    s << indent << "pid_roll_rate: ";
    s << std::endl;
    Printer< ::mvp_msgs::PIDgains_<ContainerAllocator> >::stream(s, indent + "  ", v.pid_roll_rate);
    s << indent << "pid_pitch_rate: ";
    s << std::endl;
    Printer< ::mvp_msgs::PIDgains_<ContainerAllocator> >::stream(s, indent + "  ", v.pid_pitch_rate);
    s << indent << "pid_yaw_rate: ";
    s << std::endl;
    Printer< ::mvp_msgs::PIDgains_<ContainerAllocator> >::stream(s, indent + "  ", v.pid_yaw_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVP_MSGS_MESSAGE_CONTROLMODE_H
