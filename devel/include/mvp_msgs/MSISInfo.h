// Generated by gencpp from file mvp_msgs/MSISInfo.msg
// DO NOT EDIT!


#ifndef MVP_MSGS_MESSAGE_MSISINFO_H
#define MVP_MSGS_MESSAGE_MSISINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mvp_msgs
{
template <class ContainerAllocator>
struct MSISInfo_
{
  typedef MSISInfo_<ContainerAllocator> Type;

  MSISInfo_()
    : header()
    , step_angle(0.0)
    , bins(0)
    , horizontal_beam(0.0)
    , vertical_beam(0.0)
    , min_range(0.0)
    , max_range(0.0)
    , min_rotation(0.0)
    , max_rotation(0.0)
    , gain(0.0)  {
    }
  MSISInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , step_angle(0.0)
    , bins(0)
    , horizontal_beam(0.0)
    , vertical_beam(0.0)
    , min_range(0.0)
    , max_range(0.0)
    , min_rotation(0.0)
    , max_rotation(0.0)
    , gain(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _step_angle_type;
  _step_angle_type step_angle;

   typedef uint64_t _bins_type;
  _bins_type bins;

   typedef float _horizontal_beam_type;
  _horizontal_beam_type horizontal_beam;

   typedef float _vertical_beam_type;
  _vertical_beam_type vertical_beam;

   typedef double _min_range_type;
  _min_range_type min_range;

   typedef double _max_range_type;
  _max_range_type max_range;

   typedef float _min_rotation_type;
  _min_rotation_type min_rotation;

   typedef float _max_rotation_type;
  _max_rotation_type max_rotation;

   typedef double _gain_type;
  _gain_type gain;





  typedef boost::shared_ptr< ::mvp_msgs::MSISInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mvp_msgs::MSISInfo_<ContainerAllocator> const> ConstPtr;

}; // struct MSISInfo_

typedef ::mvp_msgs::MSISInfo_<std::allocator<void> > MSISInfo;

typedef boost::shared_ptr< ::mvp_msgs::MSISInfo > MSISInfoPtr;
typedef boost::shared_ptr< ::mvp_msgs::MSISInfo const> MSISInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mvp_msgs::MSISInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mvp_msgs::MSISInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mvp_msgs::MSISInfo_<ContainerAllocator1> & lhs, const ::mvp_msgs::MSISInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.step_angle == rhs.step_angle &&
    lhs.bins == rhs.bins &&
    lhs.horizontal_beam == rhs.horizontal_beam &&
    lhs.vertical_beam == rhs.vertical_beam &&
    lhs.min_range == rhs.min_range &&
    lhs.max_range == rhs.max_range &&
    lhs.min_rotation == rhs.min_rotation &&
    lhs.max_rotation == rhs.max_rotation &&
    lhs.gain == rhs.gain;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mvp_msgs::MSISInfo_<ContainerAllocator1> & lhs, const ::mvp_msgs::MSISInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mvp_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mvp_msgs::MSISInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mvp_msgs::MSISInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mvp_msgs::MSISInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mvp_msgs::MSISInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mvp_msgs::MSISInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mvp_msgs::MSISInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mvp_msgs::MSISInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "59d3f83483205f23af9acdf27bc7d76d";
  }

  static const char* value(const ::mvp_msgs::MSISInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x59d3f83483205f23ULL;
  static const uint64_t static_value2 = 0xaf9acdf27bc7d76dULL;
};

template<class ContainerAllocator>
struct DataType< ::mvp_msgs::MSISInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mvp_msgs/MSISInfo";
  }

  static const char* value(const ::mvp_msgs::MSISInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mvp_msgs::MSISInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#\n"
"# This message defines meta information for a mechanical scanning imaging sonar (MSIS).\n"
"#\n"
"\n"
"# Time of sonar acquisition, sonar coordinate frame ID and seq \n"
"Header header\n"
"\n"
"# size of the rotation step [deg]\n"
"float64 step_angle\n"
"\n"
"# a range resolution of the sonar image\n"
"uint64 bins\n"
"\n"
"# horizontal beam width [deg]\n"
"float32 horizontal_beam\n"
"\n"
"# vertical beam width [deg]\n"
"float32 vertical_beam\n"
"\n"
"# minimum measured range [m]\n"
"float64 min_range\n"
"\n"
"# maximum measured range [m]\n"
"float64 max_range\n"
"\n"
"# minimum rotation of the sonar head [deg]\n"
"float32 min_rotation\n"
"\n"
"# maximum rotation of the sonar head [deg]\n"
"float32 max_rotation\n"
"\n"
"# gain\n"
"float64 gain \n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mvp_msgs::MSISInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mvp_msgs::MSISInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.step_angle);
      stream.next(m.bins);
      stream.next(m.horizontal_beam);
      stream.next(m.vertical_beam);
      stream.next(m.min_range);
      stream.next(m.max_range);
      stream.next(m.min_rotation);
      stream.next(m.max_rotation);
      stream.next(m.gain);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MSISInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mvp_msgs::MSISInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mvp_msgs::MSISInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "step_angle: ";
    Printer<double>::stream(s, indent + "  ", v.step_angle);
    s << indent << "bins: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.bins);
    s << indent << "horizontal_beam: ";
    Printer<float>::stream(s, indent + "  ", v.horizontal_beam);
    s << indent << "vertical_beam: ";
    Printer<float>::stream(s, indent + "  ", v.vertical_beam);
    s << indent << "min_range: ";
    Printer<double>::stream(s, indent + "  ", v.min_range);
    s << indent << "max_range: ";
    Printer<double>::stream(s, indent + "  ", v.max_range);
    s << indent << "min_rotation: ";
    Printer<float>::stream(s, indent + "  ", v.min_rotation);
    s << indent << "max_rotation: ";
    Printer<float>::stream(s, indent + "  ", v.max_rotation);
    s << indent << "gain: ";
    Printer<double>::stream(s, indent + "  ", v.gain);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MVP_MSGS_MESSAGE_MSISINFO_H
