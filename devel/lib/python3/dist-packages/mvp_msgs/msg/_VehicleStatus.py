# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mvp_msgs/VehicleStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class VehicleStatus(genpy.Message):
  _md5sum = "66af2a719019777dca15c94baf4746ab"
  _type = "mvp_msgs/VehicleStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#
#   This file is part of MVP-Mission program.
#
#   MVP-Mission is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   MVP-Mission is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with MVP-Mission.  If not, see <https://www.gnu.org/licenses/>.
#
#   Author: Mingxi Zhou
#   Email: mzhou@uri.edu
#   Year: 2022
#
#   Copyright (C) 2022 Smart Ocean Systems Laboratory
#

#global information

string  timenow         #SS-DD-MM-YY
string  timegps         #SS-DD-MM-YY
float64 latitude
float64 longitude

#important vehicle pose

geometry_msgs/Vector3 rpy   #degrees
float64 depth               # meters

# instant current and voltage of the main power source

float32 voltage         #volt
float32 current         #amp




================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['timenow','timegps','latitude','longitude','rpy','depth','voltage','current']
  _slot_types = ['string','string','float64','float64','geometry_msgs/Vector3','float64','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       timenow,timegps,latitude,longitude,rpy,depth,voltage,current

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VehicleStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.timenow is None:
        self.timenow = ''
      if self.timegps is None:
        self.timegps = ''
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.rpy is None:
        self.rpy = geometry_msgs.msg.Vector3()
      if self.depth is None:
        self.depth = 0.
      if self.voltage is None:
        self.voltage = 0.
      if self.current is None:
        self.current = 0.
    else:
      self.timenow = ''
      self.timegps = ''
      self.latitude = 0.
      self.longitude = 0.
      self.rpy = geometry_msgs.msg.Vector3()
      self.depth = 0.
      self.voltage = 0.
      self.current = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.timenow
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.timegps
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d2f().pack(_x.latitude, _x.longitude, _x.rpy.x, _x.rpy.y, _x.rpy.z, _x.depth, _x.voltage, _x.current))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.rpy is None:
        self.rpy = geometry_msgs.msg.Vector3()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timenow = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.timenow = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timegps = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.timegps = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.latitude, _x.longitude, _x.rpy.x, _x.rpy.y, _x.rpy.z, _x.depth, _x.voltage, _x.current,) = _get_struct_6d2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.timenow
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.timegps
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d2f().pack(_x.latitude, _x.longitude, _x.rpy.x, _x.rpy.y, _x.rpy.z, _x.depth, _x.voltage, _x.current))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.rpy is None:
        self.rpy = geometry_msgs.msg.Vector3()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timenow = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.timenow = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.timegps = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.timegps = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.latitude, _x.longitude, _x.rpy.x, _x.rpy.y, _x.rpy.z, _x.depth, _x.voltage, _x.current,) = _get_struct_6d2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d2f = None
def _get_struct_6d2f():
    global _struct_6d2f
    if _struct_6d2f is None:
        _struct_6d2f = struct.Struct("<6d2f")
    return _struct_6d2f
