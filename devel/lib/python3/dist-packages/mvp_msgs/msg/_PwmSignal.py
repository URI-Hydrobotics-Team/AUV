# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mvp_msgs/PwmSignal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class PwmSignal(genpy.Message):
  _md5sum = "991ddd8c160299aa4b755054be922e8d"
  _type = "mvp_msgs/PwmSignal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#
#   This file is part of MVP-Mission program.
#
#   MVP-Mission is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   MVP-Mission is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with MVP-Mission.  If not, see <https://www.gnu.org/licenses/>.
#
#   Author: Emir Cem Gezer
#   Email: emircem@uri.edu;emircem.gezer@gmail.com
#   Year: 2022
#
#   Copyright (C) 2022 Smart Ocean Systems Laboratory
#

std_msgs/Float32 signal
std_msgs/Int16 channel
================================================================================
MSG: std_msgs/Float32
float32 data
================================================================================
MSG: std_msgs/Int16
int16 data
"""
  __slots__ = ['signal','channel']
  _slot_types = ['std_msgs/Float32','std_msgs/Int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       signal,channel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PwmSignal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.signal is None:
        self.signal = std_msgs.msg.Float32()
      if self.channel is None:
        self.channel = std_msgs.msg.Int16()
    else:
      self.signal = std_msgs.msg.Float32()
      self.channel = std_msgs.msg.Int16()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_fh().pack(_x.signal.data, _x.channel.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.signal is None:
        self.signal = std_msgs.msg.Float32()
      if self.channel is None:
        self.channel = std_msgs.msg.Int16()
      end = 0
      _x = self
      start = end
      end += 6
      (_x.signal.data, _x.channel.data,) = _get_struct_fh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_fh().pack(_x.signal.data, _x.channel.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.signal is None:
        self.signal = std_msgs.msg.Float32()
      if self.channel is None:
        self.channel = std_msgs.msg.Int16()
      end = 0
      _x = self
      start = end
      end += 6
      (_x.signal.data, _x.channel.data,) = _get_struct_fh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_fh = None
def _get_struct_fh():
    global _struct_fh
    if _struct_fh is None:
        _struct_fh = struct.Struct("<fh")
    return _struct_fh
