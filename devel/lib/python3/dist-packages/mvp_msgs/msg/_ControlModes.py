# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mvp_msgs/ControlModes.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mvp_msgs.msg

class ControlModes(genpy.Message):
  _md5sum = "603519323f79819b7761d3e2017e75dd"
  _type = "mvp_msgs/ControlModes"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#
#   This file is part of MVP-Mission program.
#
#   MVP-Mission is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   MVP-Mission is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with MVP-Mission.  If not, see <https://www.gnu.org/licenses/>.
#
#   Author: Emir Cem Gezer
#   Email: emircem@uri.edu;emircem.gezer@gmail.com
#   Year: 2022
#
#   Copyright (C) 2022 Smart Ocean Systems Laboratory
#

mvp_msgs/ControlMode[] modes
================================================================================
MSG: mvp_msgs/ControlMode
#
#   This file is part of MVP-Mission program.
#
#   MVP-Mission is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   MVP-Mission is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with MVP-Mission.  If not, see <https://www.gnu.org/licenses/>.
#
#   Author: Emir Cem Gezer
#   Email: emircem@uri.edu;emircem.gezer@gmail.com
#   Year: 2022
#
#   Copyright (C) 2022 Smart Ocean Systems Laboratory
#

int32 DOF_X          = 0
int32 DOF_Y          = 1
int32 DOF_Z          = 2
int32 DOF_ROLL       = 3
int32 DOF_PITCH      = 4
int32 DOF_YAW        = 5
int32 DOF_SURGE      = 6
int32 DOF_SWAY       = 7
int32 DOF_HEAVE      = 8
int32 DOF_ROLL_RATE  = 9
int32 DOF_PITCH_RATE = 10
int32 DOF_YAW_RATE   = 11

string name
int32[] dofs

mvp_msgs/PIDgains pid_x
mvp_msgs/PIDgains pid_y
mvp_msgs/PIDgains pid_z

mvp_msgs/PIDgains pid_roll
mvp_msgs/PIDgains pid_pitch
mvp_msgs/PIDgains pid_yaw

mvp_msgs/PIDgains pid_surge
mvp_msgs/PIDgains pid_sway
mvp_msgs/PIDgains pid_heave

mvp_msgs/PIDgains pid_roll_rate
mvp_msgs/PIDgains pid_pitch_rate
mvp_msgs/PIDgains pid_yaw_rate
================================================================================
MSG: mvp_msgs/PIDgains
#
#   This file is part of MVP-Mission program.
#
#   MVP-Mission is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   MVP-Mission is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with MVP-Mission.  If not, see <https://www.gnu.org/licenses/>.
#
#   Author: Emir Cem Gezer
#   Email: emircem@uri.edu;emircem.gezer@gmail.com
#   Year: 2022
#
#   Copyright (C) 2022 Smart Ocean Systems Laboratory
#

float64 kp
float64 ki
float64 kd
float64 k_i_max
float64 k_i_min"""
  __slots__ = ['modes']
  _slot_types = ['mvp_msgs/ControlMode[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       modes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlModes, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.modes is None:
        self.modes = []
    else:
      self.modes = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.modes)
      buff.write(_struct_I.pack(length))
      for val1 in self.modes:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.dofs)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.Struct(pattern).pack(*val1.dofs))
        _v1 = val1.pid_x
        _x = _v1
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v2 = val1.pid_y
        _x = _v2
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v3 = val1.pid_z
        _x = _v3
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v4 = val1.pid_roll
        _x = _v4
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v5 = val1.pid_pitch
        _x = _v5
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v6 = val1.pid_yaw
        _x = _v6
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v7 = val1.pid_surge
        _x = _v7
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v8 = val1.pid_sway
        _x = _v8
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v9 = val1.pid_heave
        _x = _v9
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v10 = val1.pid_roll_rate
        _x = _v10
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v11 = val1.pid_pitch_rate
        _x = _v11
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v12 = val1.pid_yaw_rate
        _x = _v12
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.modes is None:
        self.modes = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.modes = []
      for i in range(0, length):
        val1 = mvp_msgs.msg.ControlMode()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.dofs = s.unpack(str[start:end])
        _v13 = val1.pid_x
        _x = _v13
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v14 = val1.pid_y
        _x = _v14
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v15 = val1.pid_z
        _x = _v15
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v16 = val1.pid_roll
        _x = _v16
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v17 = val1.pid_pitch
        _x = _v17
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v18 = val1.pid_yaw
        _x = _v18
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v19 = val1.pid_surge
        _x = _v19
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v20 = val1.pid_sway
        _x = _v20
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v21 = val1.pid_heave
        _x = _v21
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v22 = val1.pid_roll_rate
        _x = _v22
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v23 = val1.pid_pitch_rate
        _x = _v23
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v24 = val1.pid_yaw_rate
        _x = _v24
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        self.modes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.modes)
      buff.write(_struct_I.pack(length))
      for val1 in self.modes:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.dofs)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(val1.dofs.tostring())
        _v25 = val1.pid_x
        _x = _v25
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v26 = val1.pid_y
        _x = _v26
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v27 = val1.pid_z
        _x = _v27
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v28 = val1.pid_roll
        _x = _v28
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v29 = val1.pid_pitch
        _x = _v29
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v30 = val1.pid_yaw
        _x = _v30
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v31 = val1.pid_surge
        _x = _v31
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v32 = val1.pid_sway
        _x = _v32
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v33 = val1.pid_heave
        _x = _v33
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v34 = val1.pid_roll_rate
        _x = _v34
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v35 = val1.pid_pitch_rate
        _x = _v35
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
        _v36 = val1.pid_yaw_rate
        _x = _v36
        buff.write(_get_struct_5d().pack(_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.modes is None:
        self.modes = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.modes = []
      for i in range(0, length):
        val1 = mvp_msgs.msg.ControlMode()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.dofs = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        _v37 = val1.pid_x
        _x = _v37
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v38 = val1.pid_y
        _x = _v38
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v39 = val1.pid_z
        _x = _v39
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v40 = val1.pid_roll
        _x = _v40
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v41 = val1.pid_pitch
        _x = _v41
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v42 = val1.pid_yaw
        _x = _v42
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v43 = val1.pid_surge
        _x = _v43
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v44 = val1.pid_sway
        _x = _v44
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v45 = val1.pid_heave
        _x = _v45
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v46 = val1.pid_roll_rate
        _x = _v46
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v47 = val1.pid_pitch_rate
        _x = _v47
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        _v48 = val1.pid_yaw_rate
        _x = _v48
        start = end
        end += 40
        (_x.kp, _x.ki, _x.kd, _x.k_i_max, _x.k_i_min,) = _get_struct_5d().unpack(str[start:end])
        self.modes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5d = None
def _get_struct_5d():
    global _struct_5d
    if _struct_5d is None:
        _struct_5d = struct.Struct("<5d")
    return _struct_5d
