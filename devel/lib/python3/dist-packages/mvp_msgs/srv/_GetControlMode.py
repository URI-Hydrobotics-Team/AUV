# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mvp_msgs/GetControlModeRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetControlModeRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "mvp_msgs/GetControlModeRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#
#   This file is part of MVP-Mission program.
#
#   MVP-Mission is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   MVP-Mission is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with MVP-Mission.  If not, see <https://www.gnu.org/licenses/>.
#
#   Author: Emir Cem Gezer
#   Email: emircem@uri.edu;emircem.gezer@gmail.com
#   Year: 2022
#
#   Copyright (C) 2022 Smart Ocean Systems Laboratory
#

"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetControlModeRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mvp_msgs/GetControlModeResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mvp_msgs.msg

class GetControlModeResponse(genpy.Message):
  _md5sum = "fb5640b19687f4d5df9afe0ad9c910ef"
  _type = "mvp_msgs/GetControlModeResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """mvp_msgs/ControlMode mode

================================================================================
MSG: mvp_msgs/ControlMode
#
#   This file is part of MVP-Mission program.
#
#   MVP-Mission is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   MVP-Mission is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with MVP-Mission.  If not, see <https://www.gnu.org/licenses/>.
#
#   Author: Emir Cem Gezer
#   Email: emircem@uri.edu;emircem.gezer@gmail.com
#   Year: 2022
#
#   Copyright (C) 2022 Smart Ocean Systems Laboratory
#

int32 DOF_X          = 0
int32 DOF_Y          = 1
int32 DOF_Z          = 2
int32 DOF_ROLL       = 3
int32 DOF_PITCH      = 4
int32 DOF_YAW        = 5
int32 DOF_SURGE      = 6
int32 DOF_SWAY       = 7
int32 DOF_HEAVE      = 8
int32 DOF_ROLL_RATE  = 9
int32 DOF_PITCH_RATE = 10
int32 DOF_YAW_RATE   = 11

string name
int32[] dofs

mvp_msgs/PIDgains pid_x
mvp_msgs/PIDgains pid_y
mvp_msgs/PIDgains pid_z

mvp_msgs/PIDgains pid_roll
mvp_msgs/PIDgains pid_pitch
mvp_msgs/PIDgains pid_yaw

mvp_msgs/PIDgains pid_surge
mvp_msgs/PIDgains pid_sway
mvp_msgs/PIDgains pid_heave

mvp_msgs/PIDgains pid_roll_rate
mvp_msgs/PIDgains pid_pitch_rate
mvp_msgs/PIDgains pid_yaw_rate
================================================================================
MSG: mvp_msgs/PIDgains
#
#   This file is part of MVP-Mission program.
#
#   MVP-Mission is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   MVP-Mission is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with MVP-Mission.  If not, see <https://www.gnu.org/licenses/>.
#
#   Author: Emir Cem Gezer
#   Email: emircem@uri.edu;emircem.gezer@gmail.com
#   Year: 2022
#
#   Copyright (C) 2022 Smart Ocean Systems Laboratory
#

float64 kp
float64 ki
float64 kd
float64 k_i_max
float64 k_i_min"""
  __slots__ = ['mode']
  _slot_types = ['mvp_msgs/ControlMode']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetControlModeResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mode is None:
        self.mode = mvp_msgs.msg.ControlMode()
    else:
      self.mode = mvp_msgs.msg.ControlMode()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.mode.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.mode.dofs)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.mode.dofs))
      _x = self
      buff.write(_get_struct_60d().pack(_x.mode.pid_x.kp, _x.mode.pid_x.ki, _x.mode.pid_x.kd, _x.mode.pid_x.k_i_max, _x.mode.pid_x.k_i_min, _x.mode.pid_y.kp, _x.mode.pid_y.ki, _x.mode.pid_y.kd, _x.mode.pid_y.k_i_max, _x.mode.pid_y.k_i_min, _x.mode.pid_z.kp, _x.mode.pid_z.ki, _x.mode.pid_z.kd, _x.mode.pid_z.k_i_max, _x.mode.pid_z.k_i_min, _x.mode.pid_roll.kp, _x.mode.pid_roll.ki, _x.mode.pid_roll.kd, _x.mode.pid_roll.k_i_max, _x.mode.pid_roll.k_i_min, _x.mode.pid_pitch.kp, _x.mode.pid_pitch.ki, _x.mode.pid_pitch.kd, _x.mode.pid_pitch.k_i_max, _x.mode.pid_pitch.k_i_min, _x.mode.pid_yaw.kp, _x.mode.pid_yaw.ki, _x.mode.pid_yaw.kd, _x.mode.pid_yaw.k_i_max, _x.mode.pid_yaw.k_i_min, _x.mode.pid_surge.kp, _x.mode.pid_surge.ki, _x.mode.pid_surge.kd, _x.mode.pid_surge.k_i_max, _x.mode.pid_surge.k_i_min, _x.mode.pid_sway.kp, _x.mode.pid_sway.ki, _x.mode.pid_sway.kd, _x.mode.pid_sway.k_i_max, _x.mode.pid_sway.k_i_min, _x.mode.pid_heave.kp, _x.mode.pid_heave.ki, _x.mode.pid_heave.kd, _x.mode.pid_heave.k_i_max, _x.mode.pid_heave.k_i_min, _x.mode.pid_roll_rate.kp, _x.mode.pid_roll_rate.ki, _x.mode.pid_roll_rate.kd, _x.mode.pid_roll_rate.k_i_max, _x.mode.pid_roll_rate.k_i_min, _x.mode.pid_pitch_rate.kp, _x.mode.pid_pitch_rate.ki, _x.mode.pid_pitch_rate.kd, _x.mode.pid_pitch_rate.k_i_max, _x.mode.pid_pitch_rate.k_i_min, _x.mode.pid_yaw_rate.kp, _x.mode.pid_yaw_rate.ki, _x.mode.pid_yaw_rate.kd, _x.mode.pid_yaw_rate.k_i_max, _x.mode.pid_yaw_rate.k_i_min))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.mode is None:
        self.mode = mvp_msgs.msg.ControlMode()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mode.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.mode.dofs = s.unpack(str[start:end])
      _x = self
      start = end
      end += 480
      (_x.mode.pid_x.kp, _x.mode.pid_x.ki, _x.mode.pid_x.kd, _x.mode.pid_x.k_i_max, _x.mode.pid_x.k_i_min, _x.mode.pid_y.kp, _x.mode.pid_y.ki, _x.mode.pid_y.kd, _x.mode.pid_y.k_i_max, _x.mode.pid_y.k_i_min, _x.mode.pid_z.kp, _x.mode.pid_z.ki, _x.mode.pid_z.kd, _x.mode.pid_z.k_i_max, _x.mode.pid_z.k_i_min, _x.mode.pid_roll.kp, _x.mode.pid_roll.ki, _x.mode.pid_roll.kd, _x.mode.pid_roll.k_i_max, _x.mode.pid_roll.k_i_min, _x.mode.pid_pitch.kp, _x.mode.pid_pitch.ki, _x.mode.pid_pitch.kd, _x.mode.pid_pitch.k_i_max, _x.mode.pid_pitch.k_i_min, _x.mode.pid_yaw.kp, _x.mode.pid_yaw.ki, _x.mode.pid_yaw.kd, _x.mode.pid_yaw.k_i_max, _x.mode.pid_yaw.k_i_min, _x.mode.pid_surge.kp, _x.mode.pid_surge.ki, _x.mode.pid_surge.kd, _x.mode.pid_surge.k_i_max, _x.mode.pid_surge.k_i_min, _x.mode.pid_sway.kp, _x.mode.pid_sway.ki, _x.mode.pid_sway.kd, _x.mode.pid_sway.k_i_max, _x.mode.pid_sway.k_i_min, _x.mode.pid_heave.kp, _x.mode.pid_heave.ki, _x.mode.pid_heave.kd, _x.mode.pid_heave.k_i_max, _x.mode.pid_heave.k_i_min, _x.mode.pid_roll_rate.kp, _x.mode.pid_roll_rate.ki, _x.mode.pid_roll_rate.kd, _x.mode.pid_roll_rate.k_i_max, _x.mode.pid_roll_rate.k_i_min, _x.mode.pid_pitch_rate.kp, _x.mode.pid_pitch_rate.ki, _x.mode.pid_pitch_rate.kd, _x.mode.pid_pitch_rate.k_i_max, _x.mode.pid_pitch_rate.k_i_min, _x.mode.pid_yaw_rate.kp, _x.mode.pid_yaw_rate.ki, _x.mode.pid_yaw_rate.kd, _x.mode.pid_yaw_rate.k_i_max, _x.mode.pid_yaw_rate.k_i_min,) = _get_struct_60d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.mode.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.mode.dofs)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.mode.dofs.tostring())
      _x = self
      buff.write(_get_struct_60d().pack(_x.mode.pid_x.kp, _x.mode.pid_x.ki, _x.mode.pid_x.kd, _x.mode.pid_x.k_i_max, _x.mode.pid_x.k_i_min, _x.mode.pid_y.kp, _x.mode.pid_y.ki, _x.mode.pid_y.kd, _x.mode.pid_y.k_i_max, _x.mode.pid_y.k_i_min, _x.mode.pid_z.kp, _x.mode.pid_z.ki, _x.mode.pid_z.kd, _x.mode.pid_z.k_i_max, _x.mode.pid_z.k_i_min, _x.mode.pid_roll.kp, _x.mode.pid_roll.ki, _x.mode.pid_roll.kd, _x.mode.pid_roll.k_i_max, _x.mode.pid_roll.k_i_min, _x.mode.pid_pitch.kp, _x.mode.pid_pitch.ki, _x.mode.pid_pitch.kd, _x.mode.pid_pitch.k_i_max, _x.mode.pid_pitch.k_i_min, _x.mode.pid_yaw.kp, _x.mode.pid_yaw.ki, _x.mode.pid_yaw.kd, _x.mode.pid_yaw.k_i_max, _x.mode.pid_yaw.k_i_min, _x.mode.pid_surge.kp, _x.mode.pid_surge.ki, _x.mode.pid_surge.kd, _x.mode.pid_surge.k_i_max, _x.mode.pid_surge.k_i_min, _x.mode.pid_sway.kp, _x.mode.pid_sway.ki, _x.mode.pid_sway.kd, _x.mode.pid_sway.k_i_max, _x.mode.pid_sway.k_i_min, _x.mode.pid_heave.kp, _x.mode.pid_heave.ki, _x.mode.pid_heave.kd, _x.mode.pid_heave.k_i_max, _x.mode.pid_heave.k_i_min, _x.mode.pid_roll_rate.kp, _x.mode.pid_roll_rate.ki, _x.mode.pid_roll_rate.kd, _x.mode.pid_roll_rate.k_i_max, _x.mode.pid_roll_rate.k_i_min, _x.mode.pid_pitch_rate.kp, _x.mode.pid_pitch_rate.ki, _x.mode.pid_pitch_rate.kd, _x.mode.pid_pitch_rate.k_i_max, _x.mode.pid_pitch_rate.k_i_min, _x.mode.pid_yaw_rate.kp, _x.mode.pid_yaw_rate.ki, _x.mode.pid_yaw_rate.kd, _x.mode.pid_yaw_rate.k_i_max, _x.mode.pid_yaw_rate.k_i_min))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.mode is None:
        self.mode = mvp_msgs.msg.ControlMode()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mode.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.mode.dofs = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      _x = self
      start = end
      end += 480
      (_x.mode.pid_x.kp, _x.mode.pid_x.ki, _x.mode.pid_x.kd, _x.mode.pid_x.k_i_max, _x.mode.pid_x.k_i_min, _x.mode.pid_y.kp, _x.mode.pid_y.ki, _x.mode.pid_y.kd, _x.mode.pid_y.k_i_max, _x.mode.pid_y.k_i_min, _x.mode.pid_z.kp, _x.mode.pid_z.ki, _x.mode.pid_z.kd, _x.mode.pid_z.k_i_max, _x.mode.pid_z.k_i_min, _x.mode.pid_roll.kp, _x.mode.pid_roll.ki, _x.mode.pid_roll.kd, _x.mode.pid_roll.k_i_max, _x.mode.pid_roll.k_i_min, _x.mode.pid_pitch.kp, _x.mode.pid_pitch.ki, _x.mode.pid_pitch.kd, _x.mode.pid_pitch.k_i_max, _x.mode.pid_pitch.k_i_min, _x.mode.pid_yaw.kp, _x.mode.pid_yaw.ki, _x.mode.pid_yaw.kd, _x.mode.pid_yaw.k_i_max, _x.mode.pid_yaw.k_i_min, _x.mode.pid_surge.kp, _x.mode.pid_surge.ki, _x.mode.pid_surge.kd, _x.mode.pid_surge.k_i_max, _x.mode.pid_surge.k_i_min, _x.mode.pid_sway.kp, _x.mode.pid_sway.ki, _x.mode.pid_sway.kd, _x.mode.pid_sway.k_i_max, _x.mode.pid_sway.k_i_min, _x.mode.pid_heave.kp, _x.mode.pid_heave.ki, _x.mode.pid_heave.kd, _x.mode.pid_heave.k_i_max, _x.mode.pid_heave.k_i_min, _x.mode.pid_roll_rate.kp, _x.mode.pid_roll_rate.ki, _x.mode.pid_roll_rate.kd, _x.mode.pid_roll_rate.k_i_max, _x.mode.pid_roll_rate.k_i_min, _x.mode.pid_pitch_rate.kp, _x.mode.pid_pitch_rate.ki, _x.mode.pid_pitch_rate.kd, _x.mode.pid_pitch_rate.k_i_max, _x.mode.pid_pitch_rate.k_i_min, _x.mode.pid_yaw_rate.kp, _x.mode.pid_yaw_rate.ki, _x.mode.pid_yaw_rate.kd, _x.mode.pid_yaw_rate.k_i_max, _x.mode.pid_yaw_rate.k_i_min,) = _get_struct_60d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_60d = None
def _get_struct_60d():
    global _struct_60d
    if _struct_60d is None:
        _struct_60d = struct.Struct("<60d")
    return _struct_60d
class GetControlMode(object):
  _type          = 'mvp_msgs/GetControlMode'
  _md5sum = 'fb5640b19687f4d5df9afe0ad9c910ef'
  _request_class  = GetControlModeRequest
  _response_class = GetControlModeResponse
