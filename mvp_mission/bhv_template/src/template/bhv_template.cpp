/*
    This file is part of MVP-Mission program.

    MVP-Mission is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MVP-Mission is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MVP-Mission.  If not, see <https://www.gnu.org/licenses/>.

    Author: Emir Cem Gezer
    Email: emircem@uri.edu;emircem.gezer@gmail.com
    Year: 2022

    Copyright (C) 2022 Smart Ocean Systems Laboratory
*/


#include "bhv_template.h"
#include "pluginlib/class_list_macros.h"

using namespace helm;

void BehaviorTemplate::initialize() {

    /**
     * @brief Initialize node handler with the behavior namespace
     *
     * @details Parameters for the behavior is loaded under
     * /helm/<behavior_name> namespace. Therefore, nodehandler must use that
     * name as well or should take that namespace into account when reading the
     * parameters.
     *
     * @note variables with redundant class names are used for emphesizing the
     * base class member variables.
     */
    m_pnh.reset(
        new ros::NodeHandle(ros::this_node::getName() + "/" + get_name())
    );

    /**
     * @brief Declare the degree of freedoms to be controlled by the behavior
     *
     * @details This member variable dictates the DOFs that can be controllable
     * by the behavior. If this member is not initialized, behavior can only
     * trigger state changes. This vector gets values from enum type of
     * mvp_msgs/ControlMode enums.
     *
     */
    BehaviorBase::m_dofs = decltype(m_dofs){
        mvp_msgs::ControlMode::DOF_SURGE
    };

}

BehaviorTemplate::BehaviorTemplate() {
    std::cout << "A message from the template behavior" << std::endl;
}

void BehaviorTemplate::activated() {
    /**
     * @brief This function is called when the behavior gets activated.
     *
     * @note This function is an inherited virtual function. It may left
     * unimplemented.
     *
     * @details This function is called when the behavior internal state
     * defined by #BehaviorBase::m_actived changes to true.
     */
    std::cout << "Template behavior is activated!" << std::endl;
}

void BehaviorTemplate::disabled() {
    /**
     * @brief This function is called when the behavior gets disabled.
     *
     * @note This function is an inherited virtual function. It may left
     * unimplemented.
     *
     * @details This function is called when the behavior internal state
     * defined by #BehaviorBase::m_actived changes to false.
     */
    std::cout << "Template behavior is disabled!" << std::endl;
}


bool BehaviorTemplate::request_set_point(
    mvp_msgs::ControlProcess *set_point) {

    /**
     * @brief Read the controller values from #BehaviorBase::m_process_values.
     *
     * @details The object type is mvp_controller/ControlProcess. MVP Controller
     * is just a MIMO PID controller with quadratic programming optimizer.
     * Naming convention is just taken from the control theory: [Error, Set
     * Point, Process]. Process and error values are generated by the
     * controller. Vehicle's physical state is in that variable.

     * @code{.cpp}
     *      double surge = BehaviorBase::m_process_values.velocity.x;
     *      double pitch = BehaviorBase::m_process_values.orientation.y;
     * @endcode
     */
    double surge = BehaviorBase::m_process_values.velocity.x;

    /**
     * @brief Write the requested action to #set_point variable
     *
     * @details Helm calls the function to get commands generated by the
     * behavior. Behavior must modify this value with the desired action.
     * Behavior can only control the degrees of freedom defined by the
     * #BehaviorBase::m_dofs vector.
     */
    set_point->velocity.x = -surge;

    /**
     * @brief Return true if you want Helm to use the result of this behavior.
     *
     * @details Helm looks at the return value of this function and decides
     * whether or not to use the result from this function. If the function
     * returns false, helm will not use the result that is written to #set_point
     * variable.
     */
    return true;
}

/**
 * @brief Behavior must export the class to the Plugin library.
 */
PLUGINLIB_EXPORT_CLASS(helm::BehaviorTemplate, helm::BehaviorBase)